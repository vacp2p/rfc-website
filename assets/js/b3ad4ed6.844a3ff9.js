"use strict";(self.webpackChunklogos_docs_template=self.webpackChunklogos_docs_template||[]).push([[2166],{2566:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var n=i(87462),r=(i(67294),i(3905));const a={title:"12/WAKU2-FILTER",name:"Waku v2 Filter",status:"draft",version:1,editor:"Hanno Cornelius <hanno@status.im>",contributors:["Dean Eigenmann <dean@status.im>","Oskar Thor\xe9n <oskar@status.im>","Sanaz Taheri <sanaz@status.im>","Ebube Ud <ebube@status.im>"]},s=void 0,o={unversionedId:"standards/core/12/filter",id:"standards/core/12/filter",title:"12/WAKU2-FILTER",description:"- Status: draft",source:"@site/waku/standards/core/12/filter.md",sourceDirName:"standards/core/12",slug:"/standards/core/12/filter",permalink:"/waku/standards/core/12/filter",draft:!1,tags:[],version:"current",frontMatter:{title:"12/WAKU2-FILTER",name:"Waku v2 Filter",status:"draft",version:1,editor:"Hanno Cornelius \\<hanno@status.im\\>",contributors:["Dean Eigenmann \\<dean@status.im\\>","Oskar Thor\xe9n \\<oskar@status.im\\>","Sanaz Taheri \\<sanaz@status.im\\>","Ebube Ud \\<ebube@status.im\\>"]},sidebar:"defaultSidebar",previous:{title:"12/WAKU2-FILTER",permalink:"/waku/standards/core/12/previous-versions00/filter"},next:{title:"13/WAKU2-STORE",permalink:"/waku/standards/core/13/store"}},l={},u=[{value:"Content filtering",id:"content-filtering",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Design Requirements",id:"design-requirements",level:2},{value:"Security Consideration",id:"security-consideration",level:2},{value:"Terminology",id:"terminology",level:3},{value:"Adversarial Model",id:"adversarial-model",level:2},{value:"Protobuf",id:"protobuf",level:3},{value:"Filter-Subscribe",id:"filter-subscribe",level:3},{value:"Filter Subscribe Request",id:"filter-subscribe-request",level:4},{value:"Filter Subscribe Response",id:"filter-subscribe-response",level:4},{value:"Filter matching",id:"filter-matching",level:4},{value:"Filter Subscribe Types",id:"filter-subscribe-types",level:4},{value:"SUBSCRIBER_PING",id:"subscriber_ping",level:5},{value:"SUBSCRIBE",id:"subscribe",level:5},{value:"UNSUBSCRIBE",id:"unsubscribe",level:5},{value:"UNSUBSCRIBE_ALL",id:"unsubscribe_all",level:5},{value:"Filter-Push",id:"filter-push",level:3},{value:"Message Push",id:"message-push",level:4},{value:"Future Work",id:"future-work",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Next",id:"next",level:3},{value:"2.0.0-beta2",id:"200-beta2",level:3},{value:"2.0.0-beta1",id:"200-beta1",level:3},{value:"Copyright",id:"copyright",level:2},{value:"References",id:"references",level:2}],c={toc:u};function p(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Status: draft"),(0,r.kt)("li",{parentName:"ul"},"Editor: Hanno Cornelius \\",(0,r.kt)("a",{parentName:"li",href:"mailto:hanno@status.im%5C"},"hanno@status.im\\")),(0,r.kt)("li",{parentName:"ul"},"Contributors::",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Dean Eigenmann \\",(0,r.kt)("a",{parentName:"li",href:"mailto:dean@status.im%5C"},"dean@status.im\\")),(0,r.kt)("li",{parentName:"ul"},"Oskar Thor\xe9n \\",(0,r.kt)("a",{parentName:"li",href:"mailto:oskar@status.im%5C"},"oskar@status.im\\")),(0,r.kt)("li",{parentName:"ul"},"Sanaz Taheri \\",(0,r.kt)("a",{parentName:"li",href:"mailto:sanaz@status.im%5C"},"sanaz@status.im\\")),(0,r.kt)("li",{parentName:"ul"},"Ebube Ud \\",(0,r.kt)("a",{parentName:"li",href:"mailto:ebube@status.im%5C"},"ebube@status.im\\")))),(0,r.kt)("li",{parentName:"ul"},"Contributors::")),(0,r.kt)("p",null,"previous versions: ",(0,r.kt)("a",{parentName:"p",href:"./previous-versions00"},"00")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," is a protocol that enables subscribing to messages that a peer receives. This is a more lightweight version of ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuRelay")," specifically designed for bandwidth restricted devices. This is due to the fact that light nodes subscribe to full-nodes and only receive the messages they desire."),(0,r.kt)("h2",{id:"content-filtering"},"Content filtering"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Protocol identifiers"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"filter-subscribe"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"/vac/waku/filter-subscribe/2.0.0-beta1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"filter-push"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"/vac/waku/filter-push/2.0.0-beta1"))),(0,r.kt)("p",null,"Content filtering is a way to do ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern#Message_filtering"},"message-based\nfiltering"),".\nCurrently the only content filter being applied is on ",(0,r.kt)("inlineCode",{parentName:"p"},"contentTopic"),". This\ncorresponds to topics in Waku v1."),(0,r.kt)("h2",{id:"rationale"},"Rationale"),(0,r.kt)("p",null,"Unlike the ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," protocol for historical messages, this protocol allows for\nnative lower latency scenarios such as instant messaging. It is thus\ncomplementary to it."),(0,r.kt)("p",null,"Strictly speaking, it is not just doing basic request response, but performs\nsender push based on receiver intent. While this can be seen as a form of light\npub/sub, it is only used between two nodes in a direct fashion. Unlike the\nGossip domain, this is meant for light nodes which put a premium on bandwidth.\nNo gossiping takes place."),(0,r.kt)("p",null,"It is worth noting that a light node could get by with only using the ",(0,r.kt)("inlineCode",{parentName:"p"},"store"),"\nprotocol to query for a recent time window, provided it is acceptable to do\nfrequent polling."),(0,r.kt)("h2",{id:"design-requirements"},"Design Requirements"),(0,r.kt)("p",null,"The effectiveness and reliability of the content filtering service enabled by  ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol rely on the ",(0,r.kt)("em",{parentName:"p"},"high availability")," of the full nodes as the service providers. To this end, full nodes must feature ",(0,r.kt)("em",{parentName:"p"},"high uptime")," (to persistently listen and capture the network messages) as well as ",(0,r.kt)("em",{parentName:"p"},"high Bandwidth")," (to provide timely message delivery to the light nodes). "),(0,r.kt)("h2",{id:"security-consideration"},"Security Consideration"),(0,r.kt)("p",null,"Note that while using ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," allows light nodes to save bandwidth, it comes with a privacy cost in the sense that they need to disclose their liking topics to the full nodes to retrieve the relevant messages. Currently, anonymous subscription is not supported by the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter"),", however, potential solutions in this regard are sketched below in ",(0,r.kt)("a",{parentName:"p",href:"#future-work"},"Future Work")," section. "),(0,r.kt)("h3",{id:"terminology"},"Terminology"),(0,r.kt)("p",null,"The term Personally identifiable information (PII) refers to any piece of data that can be used to uniquely identify a user. For example, the signature verification key, and the hash of one's static IP address are unique for each user and hence count as PII."),(0,r.kt)("h2",{id:"adversarial-model"},"Adversarial Model"),(0,r.kt)("p",null,"Any node running the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol i.e., both the subscriber node and the queried node are considered as an adversary. Furthermore, we consider the adversary as a passive entity that attempts to collect information from other nodes to conduct an attack but it does so without violating protocol definitions and instructions. For example, under the passive adversarial model, no malicious node intentionally hides the messages matching to one's subscribed content filter as it is against the description of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol. "),(0,r.kt)("p",null,"The following are not considered as part of the adversarial model: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An adversary with a global view of all the nodes and their connections. "),(0,r.kt)("li",{parentName:"ul"},"An adversary that can eavesdrop on communication links between arbitrary pairs of nodes (unless the adversary is one end of the communication). In specific, the communication channels are assumed to be secure.")),(0,r.kt)("h3",{id:"protobuf"},"Protobuf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\n// 12/WAKU2-FILTER rfc: https://rfc.vac.dev/spec/12/\npackage waku.filter.v2;\n\n// Protocol identifier: /vac/waku/filter-subscribe/2.0.0-beta1\nmessage FilterSubscribeRequest {\n  enum FilterSubscribeType {\n    SUBSCRIBER_PING = 0;\n    SUBSCRIBE = 1;\n    UNSUBSCRIBE = 2;\n    UNSUBSCRIBE_ALL = 3;\n  }\n\n  string request_id = 1;\n  FilterSubscribeType filter_subscribe_type = 2;\n\n  // Filter criteria\n  optional string pubsub_topic = 10;\n  repeated string content_topics = 11;\n}\n\nmessage FilterSubscribeResponse {\n  string request_id = 1;\n  uint32 status_code = 10;\n  optional string status_desc = 11;\n}\n\n// Protocol identifier: /vac/waku/filter-push/2.0.0-beta1\nmessage MessagePush {\n  WakuMessage waku_message = 1;\n  optional string pubsub_topic = 2;\n}\n')),(0,r.kt)("h3",{id:"filter-subscribe"},"Filter-Subscribe"),(0,r.kt)("p",null,"A filter service node MUST support the ",(0,r.kt)("em",{parentName:"p"},"filter-subscribe"),' protocol\nto allow filter clients to subscribe, modify, refresh and unsubscribe a desired set of filter criteria.\nThe combination of different filter criteria for a specific filter client node is termed a "subscription".\nA filter client is interested in receiving messages matching the filter criteria in its registered subscriptions.'),(0,r.kt)("p",null,"Since a filter service node is consuming resources to provide this service,\nit MAY account for usage and adapt its service provision to certain clients.\nAn incentive mechanism is currently planned but underspecified."),(0,r.kt)("h4",{id:"filter-subscribe-request"},"Filter Subscribe Request"),(0,r.kt)("p",null,"A client node MUST send all filter requests in a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," message.\nThis request MUST contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"request_id"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"request_id")," MUST be a uniquely generated string.\nEach request MUST include a ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type"),", indicating the type of request."),(0,r.kt)("h4",{id:"filter-subscribe-response"},"Filter Subscribe Response"),(0,r.kt)("p",null,"In return to any ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest"),",\na filter service node SHOULD respond with a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeResponse")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"requestId")," matching that of the request.\nThis response MUST contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"status_code")," indicating if the request was successful or not.\nSuccessful status codes are in the ",(0,r.kt)("inlineCode",{parentName:"p"},"2xx")," range.\nClient nodes SHOULD consider all other status codes as error codes and assume that the requested operation had failed.\nIn addition, the filter service node MAY choose to provide a more detailed status description in the ",(0,r.kt)("inlineCode",{parentName:"p"},"status_desc")," field."),(0,r.kt)("h4",{id:"filter-matching"},"Filter matching"),(0,r.kt)("p",null,'In the description of each request type below,\nthe term "filter criteria" refers to the combination of ',(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic")," and a set of ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics"),".\nThe request MAY include filter criteria, conditional to the selected ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type"),".\nIf the request contains filter criteria,\nit MUST contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic"),"\nand the ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set MUST NOT be empty.\nA ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuMessage")," matches filter criteria when its ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topic")," is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set\nand it was published on a matching ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic"),"."),(0,r.kt)("h4",{id:"filter-subscribe-types"},"Filter Subscribe Types"),(0,r.kt)("p",null,"The following filter subscribe types are defined:"),(0,r.kt)("h5",{id:"subscriber_ping"},"SUBSCRIBER_PING"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"SUBSCRIBER_PING"),"\nrequests that the service node SHOULD indicate if it has any active subscriptions for this client.\nThe filter client SHOULD exclude any filter criteria from the request.\nThe filter service node SHOULD respond with a success code if it has any active subscriptions for this client\nor an error code if not.\nThe filter service node SHOULD ignore any filter criteria in the request."),(0,r.kt)("h5",{id:"subscribe"},"SUBSCRIBE"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"SUBSCRIBE"),"\nrequests that the service node SHOULD push messages matching this filter to the client.\nThe filter client MUST include the desired filter criteria in the request.\nA client MAY use this request type to ",(0,r.kt)("em",{parentName:"p"},"modify")," an existing subscription\nby providing ",(0,r.kt)("em",{parentName:"p"},"additional")," filter criteria in a new request.\nA client MAY use this request type to ",(0,r.kt)("em",{parentName:"p"},"refresh")," an existing subscription\nby providing ",(0,r.kt)("em",{parentName:"p"},"the same")," filter criteria in a new request.\nThe filter service node SHOULD respond with a success code if it successfully honored this request\nor an error code if not.\nThe filter service node SHOULD respond with an error code and discard the request\nif the subscribe request does not contain valid filter criteria,\ni.e. both a ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic")," ",(0,r.kt)("em",{parentName:"p"},"and")," a non-empty ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set."),(0,r.kt)("h5",{id:"unsubscribe"},"UNSUBSCRIBE"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"UNSUBSCRIBE"),"\nrequests that the service node SHOULD ",(0,r.kt)("em",{parentName:"p"},"stop")," pushing messages matching this filter to the client.\nThe filter client MUST include the filter criteria it desires to unsubscribe from in the request.\nA client MAY use this request type to ",(0,r.kt)("em",{parentName:"p"},"modify")," an existing subscription\nby providing ",(0,r.kt)("em",{parentName:"p"},"a subset of")," the original filter criteria to unsubscribe from in a new request.\nThe filter service node SHOULD respond with a success code if it successfully honored this request\nor an error code if not.\nThe filter service node SHOULD respond with an error code and discard the request\nif the unsubscribe request does not contain valid filter criteria,\ni.e. both a ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic")," ",(0,r.kt)("em",{parentName:"p"},"and")," a non-empty ",(0,r.kt)("inlineCode",{parentName:"p"},"content_topics")," set."),(0,r.kt)("h5",{id:"unsubscribe_all"},"UNSUBSCRIBE_ALL"),(0,r.kt)("p",null,"A filter client that sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterSubscribeRequest")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"filter_subscribe_type")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"UNSUBSCRIBE_ALL"),"\nrequests that the service node SHOULD ",(0,r.kt)("em",{parentName:"p"},"stop")," pushing messages matching ",(0,r.kt)("em",{parentName:"p"},"any")," filter to the client.\nThe filter client SHOULD exclude any filter criteria from the request.\nThe filter service node SHOULD remove any existing subscriptions for this client.\nIt SHOULD respond with a success code if it successfully honored this request\nor an error code if not."),(0,r.kt)("h3",{id:"filter-push"},"Filter-Push"),(0,r.kt)("p",null,"A filter client node MUST support the ",(0,r.kt)("em",{parentName:"p"},"filter-push")," protocol\nto allow filter service nodes to push messages matching registered subscriptions to this client."),(0,r.kt)("p",null,"A filter service node SHOULD push all messages\nmatching the filter criteria in a registered subscription\nto the subscribed filter client.\nThese ",(0,r.kt)("a",{parentName:"p",href:"../14/message"},(0,r.kt)("inlineCode",{parentName:"a"},"WakuMessage"),"s")," are likely to come from ",(0,r.kt)("a",{parentName:"p",href:"../11/relay"},(0,r.kt)("inlineCode",{parentName:"a"},"11/WAKU2-RELAY")),",\nbut there MAY be other sources or protocols where this comes from.\nThis is up to the consumer of the protocol."),(0,r.kt)("p",null,"If a message push fails,\nthe filter service node MAY consider the client node to be unreachable.\nIf a specific filter client node is not reachable from the service node for a period of time,\nthe filter service node MAY choose to stop pushing messages to the client and remove its subscription.\nThis period is up to the service node implementation.\nWe consider ",(0,r.kt)("inlineCode",{parentName:"p"},"1 minute")," to be a reasonable default."),(0,r.kt)("h4",{id:"message-push"},"Message Push"),(0,r.kt)("p",null,"Each message MUST be pushed in a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush")," message.\nEach ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush")," MUST contain one (and only one) ",(0,r.kt)("inlineCode",{parentName:"p"},"waku_message"),".\nIf this message was received on a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"pubsub_topic"),",\nit SHOULD be included in the ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush"),".\nA filter client SHOULD NOT respond to a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush"),".\nSince the filter protocol does not include caching or fault-tolerance,\nthis is a best effort push service with no bundling\nor guaranteed retransmission of messages.\nA filter client SHOULD verify that each ",(0,r.kt)("inlineCode",{parentName:"p"},"MessagePush")," it receives\noriginated from a service node where the client has an active subscription\nand that it matches filter criteria belonging to that subscription."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"future-work"},"Future Work"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Anonymous filter subscription"),": This feature guarantees that nodes can anonymously subscribe for a message filter (i.e., without revealing their exact content filter). As such, no adversary in the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol would be able to link nodes to their subscribed content filers. The current version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WakuFilter")," protocol does not provide anonymity as the subscribing node has a direct connection to the full node and explicitly submits its content filter to be notified about the matching messages. However, one can consider preserving anonymity through one of the following ways: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By hiding the source of the subscription i.e., anonymous communication. That is the subscribing node shall hide all its PII in its filter request e.g., its IP address. This can happen by the utilization of a proxy server or by using Tor",".\nNote that the current structure of filter requests i.e., ",(0,r.kt)("inlineCode",{parentName:"li"},"FilterRPC")," does not embody any piece of PII, otherwise, such data fields must be treated carefully to achieve anonymity. "),(0,r.kt)("li",{parentName:"ul"},"By deploying secure 2-party computations in which the subscribing node obtains the messages matching a content filter whereas the full node learns nothing about the content filter as well as the messages pushed to the subscribing node. Examples of such 2PC protocols are ",(0,r.kt)("a",{parentName:"li",href:"https://link.springer.com/referenceworkentry/10.1007%2F978-1-4419-5906-5_9#:~:text=Oblivious%20transfer%20(OT)%20is%20a,information%20the%20receiver%20actually%20obtains."},"Oblivious Transfers")," and one-way Private Set Intersections (PSI).")),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("h3",{id:"next"},"Next"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Added initial threat model and security analysis.\n")),(0,r.kt)("h3",{id:"200-beta2"},"2.0.0-beta2"),(0,r.kt)("p",null,"Initial draft version. Released ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vacp2p/specs/commit/5ceeb88cee7b918bb58f38e7c4de5d581ff31e68"},"2020-10-28")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fix: Ensure contentFilter is a repeated field, on implementation"),(0,r.kt)("li",{parentName:"ul"},"Change: Add ability to unsubscribe from filters. Make ",(0,r.kt)("inlineCode",{parentName:"li"},"subscribe")," an explicit boolean indication. Edit protobuf field order to be consistent with libp2p.")),(0,r.kt)("h3",{id:"200-beta1"},"2.0.0-beta1"),(0,r.kt)("p",null,"Initial draft version. Released ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vacp2p/specs/commit/31857c7434fa17efc00e3cd648d90448797d107b"},"2020-10-05")),(0,r.kt)("h2",{id:"copyright"},"Copyright"),(0,r.kt)("p",null,"Copyright and related rights waived via\n",(0,r.kt)("a",{parentName:"p",href:"https://creativecommons.org/publicdomain/zero/1.0/"},"CC0"),"."),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern#Message_filtering"},"message-based\nfiltering")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../14/message"},(0,r.kt)("inlineCode",{parentName:"a"},"WakuMessage"),"s")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../11/relay"},(0,r.kt)("inlineCode",{parentName:"a"},"11/WAKU2-RELAY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://link.springer.com/referenceworkentry/10.1007%2F978-1-4419-5906-5_9#:~:text=Oblivious%20transfer%20(OT)%20is%20a,information%20the%20receiver%20actually%20obtains"},"Oblivious Transfers")),(0,r.kt)("li",{parentName:"ul"},"previous versions: ",(0,r.kt)("a",{parentName:"li",href:"./previous-versions00"},"00"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern#Message_filtering"},"Message Filtering (Wikipedia)"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/libp2p/specs/tree/master/pubsub#topic-validation"},"Libp2p PubSub spec - topic validation")))))}p.isMDXComponent=!0},3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>h});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(i),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return i?n.createElement(m,s(s({ref:t},c),{},{components:i})):n.createElement(m,s({ref:t},c))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<a;u++)s[u]=i[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"}}]);